#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
minu: [a-z]
mai: [A-Z]
letra: {minu} | {mai}
d: [0-9]
int: 0 | ([1-9]{d}*)
prefixos: i_ | f_ | s_ | b_
id_p1: {mai}
id_p2: {minu}|{mai}({minu}|{d})
id_p3: ({minu}|{d}|{mai}({d}|{minu}))*

#Tokens
// Gustavo Vergilio Poleza | Lemuel Manske | JoÃ£o Henrique

palavra_reservada: {minu}{letra}*

pr_main = palavra_reservada: "main"
pr_end = palavra_reservada: "end"
pr_if = palavra_reservada: "if"
pr_elif = palavra_reservada: "elif"
pr_else = palavra_reservada: "else"
pr_false = palavra_reservada: "false"
pr_true = palavra_reservada: "true"
pr_read = palavra_reservada: "read"
pr_write = palavra_reservada: "write"
pr_writeln = palavra_reservada: "writeln"
pr_repeat = palavra_reservada: "repeat"
pr_until = palavra_reservada: "until"
pr_while  = palavra_reservada: "while"


id:!{prefixos}({id_p1}|({id_p2}{id_p3}{mai}?))

constante_int: {int}
constante_float: {int}","(0 | {d}*[1-9])
constante_string: \"([^\n\""%"] | "%"x)*\"

:! ">@"\n[^"@"]*\n"@<"

"&&"
"||"
"!"
"=="
"!="
"<"
">"
"+"
"-"
"*"
"/"
","
";"
"="
"("
")"

:[\s\n\t]
#NonTerminals
<programa>

<lista_instr>

<lista_instr1>

<instrucao>

<instrucao1>

<lista_id>

<lista_id1>

<comando>

<atribuicao>

<input>

<output>

<selecao>

<repeticao>

<repeticao1>

<lista_inputs>

<lista_inputs1>

<inicio_input>

<lista_expr>

<lista_expr1>

<lista_comandos>

<lista_comandos1>

<if>

<elif>

<else>

<repeat_while>

<repeat_until>

<expressao>

<expressao1>

<elemento>

<relacional>

<relacional1>

<operador_relacional>

<aritmetica>

<aritmetica1>

<termo>

<termo1>

<fator>


// >
#Grammar
<programa> ::= #100 pr_main <lista_instr> pr_end #101 ;

<lista_instr> ::= <instrucao> ";" <lista_instr1> ;

<lista_instr1> ::= <lista_instr> | î ;

<instrucao> ::= <lista_id> <instrucao1> | <input> | <output> | <selecao> | <repeticao> ;

<instrucao1> ::= "=" <expressao> #103 | #102 î ;

<comando> ::= <atribuicao> | <input> | <output> | <selecao> | <repeticao> ;

<atribuicao> ::= <lista_id> "=" <expressao> #103 ;



<input> ::= pr_read "(" <lista_inputs> ")" ;

<lista_inputs> ::= <inicio_input> id #105 <lista_inputs1> ;

<lista_inputs1> ::= "," <lista_inputs> | î ; 

<inicio_input> ::= constante_string #106 "," | î ;



<output> ::= pr_write "(" <lista_expr> ")" | pr_writeln "(" <lista_expr> ")" #107 ;



<selecao> ::= <if> <elif> #110 <else> #111 ;

<if> ::= pr_if <expressao> #109 <lista_comandos> ;

<elif> ::= î | #110 pr_elif <expressao> #112 <lista_comandos> <elif> ;

<else> ::= pr_else <lista_comandos> pr_end | pr_end ;



<repeticao> ::= #113 pr_repeat <lista_comandos> <repeticao1> ;

<repeticao1> ::= <repeat_while> | <repeat_until> ;

<repeat_while> ::= pr_while <expressao> #114 ;

<repeat_until> ::= pr_until <expressao> #115 ;



<expressao> ::= <elemento> <expressao1> ;

<expressao1> ::= î | "&&" <elemento> #116 <expressao1> | "||" <elemento> #117 <expressao1> ;

<elemento> ::= <relacional> | pr_true #118 | pr_false #119 | "!" <elemento> #120 ;

<relacional> ::= <aritmetica> <relacional1> ;

<relacional1> ::= î | <operador_relacional> #121 <aritmetica> #122 ;

<operador_relacional>::= "==" | "!=" | "<" | ">" ;

<aritmetica> ::= <termo> <aritmetica1> ;

<aritmetica1> ::= î | "+" <termo> #123 <aritmetica1> | "-" <termo> #124 <aritmetica1> ;

<termo> ::= <fator> <termo1> ;

<termo1> ::= î | "*" <fator> #125 <termo1> | "/" <fator> #126 <termo1> ;

<fator> ::= id #127 |
 constante_int #128 |
 constante_float #129 |
 constante_string #130 |
 "(" <expressao> ")" |
 "+" <fator> |
 "-" <fator> #131 ; 



// utilitarios



<lista_comandos> ::= <comando> ";" <lista_comandos1> ;

<lista_comandos1> ::= <lista_comandos> | î ;

<lista_expr> ::= <expressao> #108 <lista_expr1> ;

<lista_expr1> ::= "," <lista_expr> | î ;

<lista_id> ::= id #104 <lista_id1> ;

<lista_id1> ::= "," <lista_id> | î ;

